{"version":3,"sources":["data/fetch/budget.fetch.js","data/fetch/common.fetch.js","data/fetch/index.js","pages/Budget/components/EditTransactionForm/EditTransactionForm.jsx","pages/Budget/components/EditTransactionForm/EditTransactionView.jsx"],"names":["fetchBudget","key","a","id","fetch","process","response","json","data","fetchBudgetedCategories","addTransaction","budgetId","method","headers","body","JSON","stringify","responseData","deleteTransaction","transactionId","editTransaction","dataOutput","fetchAllCategories","budget","common","EditTransactionForm","onSubmit","noop","transactions","categories","groupCategoriesBy","t","useTranslation","useParams","find","transaction","amount","categoryId","date","description","required","value","undefined","groupedCategoriesByParentName","groupBy","categoryItems","useMemo","Object","entries","map","parentName","label","category","name","render","handleSubmit","submitting","form","pristine","values","validate","defaultValue","input","meta","type","placeholder","error","touched","role","parse","Number","step","slice","className","disabled","EditTransactionView","useQuery","API","allCategories","useMutation","onSuccess","queryCache","invalidateQueries","toast","success","position","POSITION","TOP_RIGHT","onError","mutate","history","useHistory","then","push"],"mappings":"qdAAaA,EAAW,uCAAG,WAAOC,EAAP,sBAAAC,EAAA,6DAAcC,EAAd,EAAcA,GAAd,SACAC,MAAM,GAAD,OAAIC,wBAAJ,oBAA6CF,EAA7C,0BADL,cACjBG,EADiB,gBAEJA,EAASC,OAFL,cAEjBC,EAFiB,yBAIhBA,GAJgB,2CAAH,wDAOXC,EAAuB,uCAAG,WAAOR,EAAP,sBAAAC,EAAA,6DAAcC,EAAd,EAAcA,GAAd,SACZC,MAAM,GAAD,OAAIC,wBAAJ,oBAA6CF,EAA7C,sBADO,cAC7BG,EAD6B,gBAEhBA,EAASC,OAFO,cAE7BC,EAF6B,yBAI5BA,GAJ4B,2CAAH,wDAOvBE,EAAc,uCAAG,mCAAAR,EAAA,6DAASS,EAAT,EAASA,SAAUH,EAAnB,EAAmBA,KAAnB,SACHJ,MAAM,GAAD,OACrBC,wBADqB,oBACoBM,EADpB,iBAExB,CACIC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,KARH,cACpBF,EADoB,gBAWCA,EAASC,OAXV,cAWpBU,EAXoB,yBAanBA,GAbmB,2CAAH,sDAgBdC,EAAiB,uCAAG,WAAMC,GAAN,iBAAAjB,EAAA,sEACNE,MAAM,GAAD,OACrBC,wBADqB,yBACyBc,GACjD,CACIP,OAAQ,WAJa,cACvBN,EADuB,gBAOVA,EAASC,OAPC,cAOvBC,EAPuB,yBAStBA,GATsB,2CAAH,sDAYjBY,EAAe,uCAAG,mCAAAlB,EAAA,6DAASiB,EAAT,EAASA,cAAeX,EAAxB,EAAwBA,KAAxB,SACJJ,MAAM,GAAD,OACrBC,wBADqB,yBACyBc,GACjD,CACIP,OAAQ,QACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,KARF,cACrBF,EADqB,gBAWFA,EAASC,OAXP,cAWrBc,EAXqB,yBAapBA,GAboB,2CAAH,sDC1CfC,EAAkB,uCAAG,8BAAApB,EAAA,sEACPE,MAAM,GAAD,OAAIC,wBAAJ,wCADE,cACxBC,EADwB,gBAEXA,EAASC,OAFE,cAExBC,EAFwB,yBAIvBA,GAJuB,2CAAH,qDCGzBJ,EAAQ,CACVmB,SACAC,UAGWpB,O,gKCqFAqB,EAvFa,SAAC,GAAsE,IAAD,IAAnEC,gBAAmE,MAAxDC,OAAwD,EAAlDC,EAAkD,EAAlDA,aAAcC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,kBAC9DC,EAAMC,cAAND,EACA5B,EAAO8B,cAAP9B,GAFsF,EAI5CyB,EAAaM,MAAK,SAAAC,GAAW,OAAIA,EAAYhC,KAAOA,KAA9FiC,EAJsF,EAItFA,OAAQC,EAJ8E,EAI9EA,WAAYC,EAJkE,EAIlEA,KAAMC,EAJ4D,EAI5DA,YAE5BC,EAAW,SAAAC,GAAK,OAAKA,OAAQC,EAAYX,EAAE,uBAE3CY,EAAgCb,EAChCc,kBAAQf,EAAYC,GACpB,KAEAe,EAAgBC,mBAClB,kBAAMH,EACAI,OAAOC,QAAQL,GACZM,KAAI,mCAAEC,EAAF,KAAcrB,EAAd,YACD,0BAA2BsB,MAAOpB,EAAEmB,GAApC,SACKrB,EAAWoB,KAAI,SAAAG,GAAQ,OACpB,wBAA0BX,MAAOW,EAASjD,GAA1C,SAA+C4B,EAAEqB,EAASC,OAA7CD,EAASjD,QAFf+C,MAMrBrB,EAAWoB,KAAI,SAAAG,GAAQ,OACrB,wBAAQX,MAAOW,EAASjD,GAAxB,SAA6B4B,EAAEqB,EAASC,aAEhD,CAACxB,EAAYc,EAA+BZ,IAGhD,OACI,qCACI,6BAAKA,EAAE,yBACP,cAAC,IAAD,CACIL,SAAUA,EACV4B,OAAQ,gBAAGC,EAAH,EAAGA,aAAoBC,GAAvB,EAAiBC,KAAjB,EAAuBD,YAAvB,EAAmCE,SAAnC,EAA6CC,OAA7C,OACJ,uBAAMjC,SAAU6B,EAAhB,UACI,cAAC,IAAD,CAAOF,KAAK,cAAcO,SAAUpB,EAAUqB,aAActB,EAA5D,SACK,YAAsB,IAAnBuB,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACP,OACI,gCACI,gCAAQhC,EAAE,iBACV,iDAAW+B,GAAX,IAAkBE,KAAK,OAAOC,YAAalC,EAAE,kBAC5CgC,EAAKG,OAASH,EAAKI,SAAW,sBAAMC,KAAK,QAAX,SAAoBL,EAAKG,cAKxE,cAAC,IAAD,CAAOb,KAAK,SAASO,SAAUpB,EAAUqB,aAAczB,EAAQiC,MAAO,SAAA5B,GAAK,OAAI6B,OAAO7B,IAAtF,SACK,gBAAGqB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,gCACI,gCAAQhC,EAAE,YACV,iDAAW+B,GAAX,IAAkBE,KAAK,SAASO,KAAK,OAAON,YAAalC,EAAE,aAC1DgC,EAAKG,OAASH,EAAKI,SAAW,sBAAMC,KAAK,QAAX,SAAoBL,EAAKG,cAIpE,cAAC,IAAD,CAAOb,KAAK,aAAaO,SAAUpB,EAAUqB,aAAcxB,EAA3D,SACK,gBAAGyB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,gCACI,gCAAQhC,EAAE,cACV,kDAAY+B,GAAZ,aACKjB,KAEJkB,EAAKG,OAASH,EAAKI,SAAW,sBAAMC,KAAK,QAAX,SAAoBL,EAAKG,cAIpE,cAAC,IAAD,CAAOb,KAAK,OAAOO,SAAUpB,EAAUqB,aAAcvB,EAAKkC,MAAM,EAAG,IAAnE,SACK,gBAAGV,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACG,gCACI,gCAAQhC,EAAE,UACV,iDAAW+B,GAAX,IAAkBE,KAAK,OAAOC,YAAalC,EAAE,WAC5CgC,EAAKG,OAASH,EAAKI,SAAW,sBAAMC,KAAK,QAAX,SAAoBL,EAAKG,cAIpE,qBAAKO,UAAU,UAAf,SACI,wBAAQT,KAAK,SAASU,SAAUlB,EAAhC,SACKzB,EAAE,wB,gBC/BpB4C,EAzCa,WAAO,IACvBxE,EAAO8B,cAAP9B,GAEMoB,EAAWqD,YAAS,CAAC,SAAU,CAAEzE,GAAI,IAAM0E,IAAItD,OAAOvB,aAA5DQ,KACMsE,EAAkBF,YAAS,CAAC,iBAAkBC,IAAIrD,OAAOF,oBAA/Dd,KAJsB,EAMbuE,YAAYF,IAAItD,OAAOH,gBAAiB,CACrD4D,UAAW,WACPC,IAAWC,kBAAkB,CAAC,SAAU,CAAE/E,GAAI,KAC9CgF,IAAMC,QAAQrD,EAAE,iCAAkC,CAC9CsD,SAAUF,IAAMG,SAASC,aAGjCC,QAAS,WACLL,IAAMjB,MAAMnC,EAAE,yBAA0B,CACpCsD,SAAUF,IAAMG,SAASC,eAT9BE,EANuB,oBAoBxBC,EAAUC,cACR5D,EAAMC,cAAND,EAeR,OACI,cAAC,EAAD,CAAqBL,SAbW,SAAAiC,GAChCA,EAAOxD,GAAKA,EACZwD,EAAOhD,SAAWY,EAAOpB,GAEzBsF,EAAO,CACHtE,cAAehB,EACfK,KAAMmD,IAELiC,MAAK,kBAAMF,EAAQG,KAAK,eAK+BhE,WAAYiD,EAAelD,aAAcL,EAAOK,aAAcE,kBAAmB","file":"static/js/10.10827744.chunk.js","sourcesContent":["export const fetchBudget = async (key, { id }) => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/${id}/?_embed=transactions`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n}\r\n\r\nexport const fetchBudgetedCategories = async (key, { id }) => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/${id}/budgetCategories`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n}\r\n\r\nexport const addTransaction = async ({ budgetId, data }) => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions`,\r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }\r\n    );\r\n    const responseData = await response.json();\r\n\r\n    return responseData;\r\n}\r\n\r\nexport const deleteTransaction = async transactionId => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/transactions/${transactionId}`,\r\n        {\r\n            method: \"DELETE\",\r\n        }\r\n    );\r\n    const data = await response.json();\r\n\r\n    return data;\r\n}\r\n\r\nexport const editTransaction = async ({ transactionId, data }) => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/transactions/${transactionId}`,\r\n        {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }\r\n    );\r\n    const dataOutput = await response.json();\r\n\r\n    return dataOutput;\r\n}","export const fetchAllCategories = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n}\r\n","import * as budget from './budget.fetch';\r\nimport * as common from './common.fetch';\r\n\r\nconst fetch = {\r\n    budget,\r\n    common,\r\n}\r\n\r\nexport default fetch;","import React, { useMemo } from 'react';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { groupBy, noop } from 'lodash';\r\n\r\nconst EditTransactionForm = ({ onSubmit = noop, transactions, categories, groupCategoriesBy }) => {\r\n    const { t } = useTranslation();\r\n    const { id } = useParams();\r\n\r\n    const { amount, categoryId, date, description } = transactions.find(transaction => transaction.id === id);\r\n\r\n    const required = value => (value ? undefined : t('Field is required!'));\r\n\r\n    const groupedCategoriesByParentName = groupCategoriesBy\r\n        ? groupBy(categories, groupCategoriesBy)\r\n        : null;\r\n\r\n    const categoryItems = useMemo(\r\n        () => groupedCategoriesByParentName\r\n            ? Object.entries(groupedCategoriesByParentName)\r\n                .map(([parentName, categories]) => (\r\n                    <optgroup key={parentName} label={t(parentName)}>\r\n                        {categories.map(category => (\r\n                            <option key={category.id} value={category.id}>{t(category.name)}</option>\r\n                        ))}\r\n                    </optgroup>\r\n                ))\r\n            : categories.map(category => (\r\n                <option value={category.id}>{t(category.name)}</option>\r\n            )),\r\n        [categories, groupedCategoriesByParentName, t]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <h2>{t('Transaction edition')}</h2>\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Field name=\"description\" validate={required} defaultValue={description}>\r\n                            {({ input, meta }) => {\r\n                                return (\r\n                                    <div>\r\n                                        <label>{t('Description')}</label>\r\n                                        <input {...input} type=\"text\" placeholder={t('Description')} />\r\n                                        {meta.error && meta.touched && <span role=\"alert\">{meta.error}</span>}\r\n                                    </div>\r\n                                )\r\n                            }}\r\n                        </Field>\r\n                        <Field name=\"amount\" validate={required} defaultValue={amount} parse={value => Number(value)}>\r\n                            {({ input, meta }) => (\r\n                                <div>\r\n                                    <label>{t('Amount')}</label>\r\n                                    <input {...input} type=\"number\" step=\"0.01\" placeholder={t('Amount')} />\r\n                                    {meta.error && meta.touched && <span role=\"alert\">{meta.error}</span>}\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"categoryId\" validate={required} defaultValue={categoryId}>\r\n                            {({ input, meta }) => (\r\n                                <div>\r\n                                    <label>{t('Category')}</label>\r\n                                    <select {...input}>\r\n                                        {categoryItems}\r\n                                    </select>\r\n                                    {meta.error && meta.touched && <span role=\"alert\">{meta.error}</span>}\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"date\" validate={required} defaultValue={date.slice(0, 10)}>\r\n                            {({ input, meta }) => (\r\n                                <div>\r\n                                    <label>{t('Date')}</label>\r\n                                    <input {...input} type=\"date\" placeholder={t('Date')} />\r\n                                    {meta.error && meta.touched && <span role=\"alert\">{meta.error}</span>}\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n                        <div className=\"buttons\">\r\n                            <button type=\"submit\" disabled={submitting}>\r\n                                {t('Submit')}\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditTransactionForm;","import React from 'react';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport EditTransactionForm from './EditTransactionForm';\r\n\r\nimport API from 'data/fetch';\r\nimport queryCache from 'data/query/queryCache';\r\n\r\nconst EditTransactionView = () => {\r\n    const { id } = useParams();\r\n\r\n    const { data: budget } = useQuery(['budget', { id: 1 }], API.budget.fetchBudget);\r\n    const { data: allCategories } = useQuery(['allCategories'], API.common.fetchAllCategories);\r\n\r\n    const [mutate] = useMutation(API.budget.editTransaction, {\r\n        onSuccess: () => {\r\n            queryCache.invalidateQueries(['budget', { id: 1 }]);\r\n            toast.success(t('Transaction has been updated!'), {\r\n                position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n        },\r\n        onError: () => {\r\n            toast.error(t('Something went wrong.'), {\r\n                position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n        }\r\n    });\r\n\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n\r\n\r\n    const handleSubmitEditTransaction = values => {\r\n        values.id = id;\r\n        values.budgetId = budget.id;\r\n\r\n        mutate({\r\n            transactionId: id,\r\n            data: values,\r\n        })\r\n            .then(() => history.push(\"/budget\"));\r\n    };\r\n\r\n\r\n    return (\r\n        <EditTransactionForm onSubmit={handleSubmitEditTransaction} categories={allCategories} transactions={budget.transactions} groupCategoriesBy={'parentCategory.name'} />\r\n    );\r\n}\r\n\r\nexport default EditTransactionView;"],"sourceRoot":""}