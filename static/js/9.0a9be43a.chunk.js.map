{"version":3,"sources":["data/fetch/budget.fetch.js","data/fetch/common.fetch.js","data/fetch/index.js","pages/Budget/components/AddTransactionForm/AddTransactionForm.jsx","pages/Budget/components/AddTransactionForm/AddTransactionView.jsx"],"names":["fetchBudget","key","a","id","fetch","process","response","json","data","fetchBudgetedCategories","addTransaction","budgetId","method","headers","body","JSON","stringify","responseData","deleteTransaction","transactionId","editTransaction","dataOutput","fetchAllCategories","budget","common","AddTransactionForm","onSubmit","noop","categories","groupCategoriesBy","t","useTranslation","required","value","undefined","groupedCategoriesByParentName","groupBy","categoryItems","useMemo","Object","entries","map","parentName","label","category","name","render","handleSubmit","form","submitting","pristine","values","validate","input","meta","type","placeholder","error","touched","role","parse","Number","step","defaultValue","disabled","Date","toISOString","slice","className","onClick","reset","AddTransactionView","useQuery","API","allCategories","useMutation","onSuccess","queryCache","invalidateQueries","toast","success","position","POSITION","TOP_RIGHT","onError","mutate","history","useHistory","then","push"],"mappings":"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","file":"static/js/9.0a9be43a.chunk.js","sourcesContent":["export const fetchBudget = async (key, { id }) => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/${id}/?_embed=transactions`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n}\r\n\r\nexport const fetchBudgetedCategories = async (key, { id }) => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/${id}/budgetCategories`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n}\r\n\r\nexport const addTransaction = async ({ budgetId, data }) => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions`,\r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }\r\n    );\r\n    const responseData = await response.json();\r\n\r\n    return responseData;\r\n}\r\n\r\nexport const deleteTransaction = async transactionId => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/transactions/${transactionId}`,\r\n        {\r\n            method: \"DELETE\",\r\n        }\r\n    );\r\n    const data = await response.json();\r\n\r\n    return data;\r\n}\r\n\r\nexport const editTransaction = async ({ transactionId, data }) => {\r\n    const response = await fetch(\r\n        `${process.env.REACT_APP_API_URL}/transactions/${transactionId}`,\r\n        {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        }\r\n    );\r\n    const dataOutput = await response.json();\r\n\r\n    return dataOutput;\r\n}","export const fetchAllCategories = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n}\r\n","import * as budget from './budget.fetch';\r\nimport * as common from './common.fetch';\r\n\r\nconst fetch = {\r\n    budget,\r\n    common,\r\n}\r\n\r\nexport default fetch;","import React, { useMemo } from 'react';\r\nimport { Form, Field } from 'react-final-form'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { groupBy, noop } from 'lodash';\r\n\r\n\r\nconst AddTransactionForm = ({ onSubmit = noop, categories, groupCategoriesBy }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const required = value => (value ? undefined : t('Field is required!'));\r\n\r\n  const groupedCategoriesByParentName = groupCategoriesBy\r\n    ? groupBy(categories, groupCategoriesBy)\r\n    : null;\r\n\r\n  const categoryItems = useMemo(\r\n    () => groupedCategoriesByParentName\r\n      ? Object.entries(groupedCategoriesByParentName)\r\n        .map(([parentName, categories]) => (\r\n          <optgroup key={parentName} label={t(parentName)}>\r\n            {categories.map(category => (\r\n              <option key={category.id} value={category.id}>{t(category.name)}</option>\r\n            ))}\r\n          </optgroup>\r\n        ))\r\n      : categories.map(category => (\r\n        <option value={category.id}>{t(category.name)}</option>\r\n      )),\r\n    [categories, groupedCategoriesByParentName, t]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h2>{t('Add new transaction')}</h2>\r\n      <Form\r\n        onSubmit={onSubmit}\r\n        render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Field name=\"description\" validate={required}>\r\n              {({ input, meta }) => (\r\n                <div>\r\n                  <label>{t('Description')}</label>\r\n                  <input {...input} type=\"text\" placeholder={t('Description')} />\r\n                  {meta.error && meta.touched && <span role=\"alert\">{meta.error}</span>}\r\n                </div>\r\n              )}\r\n            </Field>\r\n            <Field name=\"amount\" validate={required} parse={value => Number(value)}>\r\n              {({ input, meta }) => (\r\n                <div>\r\n                  <label>{t('Amount')}</label>\r\n                  <input {...input} type=\"number\" step=\"0.01\" placeholder={t('Amount')} />\r\n                  {meta.error && meta.touched && <span role=\"alert\">{meta.error}</span>}\r\n                </div>\r\n              )}\r\n            </Field>\r\n            <Field name=\"categoryId\" defaultValue=\"\" validate={required}>\r\n              {({ input, meta }) => (\r\n                <div>\r\n                  <label>{t('Category')}</label>\r\n                  <select {...input}>\r\n                    <option value=\"\" disabled>{t('Choose category')}</option>\r\n                    {categoryItems}\r\n                  </select>\r\n                  {meta.error && meta.touched && <span role=\"alert\">{meta.error}</span>}\r\n                </div>\r\n              )}\r\n            </Field>\r\n            <Field name=\"date\" defaultValue={new Date().toISOString().slice(0, 10)} validate={required}>\r\n              {({ input, meta }) => (\r\n                <div>\r\n                  <label>{t('Date')}</label>\r\n                  <input {...input} type=\"date\" placeholder={t('Date')} />\r\n                  {meta.error && meta.touched && <span role=\"alert\">{meta.error}</span>}\r\n                </div>\r\n              )}\r\n            </Field>\r\n            <div className=\"buttons\">\r\n              <button type=\"submit\" disabled={submitting}>\r\n                {t('Submit')}\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={form.reset}\r\n                disabled={submitting || pristine}\r\n              >\r\n                {t('Reset')}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddTransactionForm;","import React from 'react';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport AddTransactionForm from './AddTransactionForm';\r\n\r\nimport API from 'data/fetch';\r\nimport queryCache from 'data/query/queryCache';\r\n\r\nconst AddTransactionView = () => {\r\n    const { data: budget } = useQuery(['budget', { id: 1 }], API.budget.fetchBudget);\r\n    const { data: allCategories } = useQuery(['allCategories'], API.common.fetchAllCategories);\r\n\r\n    const [mutate] = useMutation(API.budget.addTransaction, {\r\n        onSuccess: () => {\r\n            queryCache.invalidateQueries(['budget', { id: 1 }]);\r\n            toast.success(t('Transaction has been added!'), {\r\n                position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n        },\r\n        onError: () => {\r\n            toast.error(t('Something went wrong.'), {\r\n                position: toast.POSITION.TOP_RIGHT,\r\n            });\r\n        }\r\n    });\r\n\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n\r\n\r\n    const handleSubmitAddTransaction = values => {\r\n        mutate({\r\n            budgetId: budget.id,\r\n            data: values,\r\n        })\r\n            .then(() => history.push(\"/budget\"));\r\n    };\r\n\r\n\r\n    return (\r\n        <AddTransactionForm onSubmit={handleSubmitAddTransaction} categories={allCategories} groupCategoriesBy={'parentCategory.name'} />\r\n    );\r\n}\r\n\r\nexport default AddTransactionView;"],"sourceRoot":""}